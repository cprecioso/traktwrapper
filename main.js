// Generated by LiveScript 1.2.0
(function(){
  var Q, createHash, resolve, methods, request, sha1, strCast, Trakt, toString$ = {}.toString, split$ = ''.split;
  Q = require('q');
  Q.longStackSupport = true;
  createHash = require('crypto').createHash;
  resolve = require('url').resolve;
  methods = require('./methods.json');
  request = Q.denodeify(require('request'));
  sha1 = (function(arg$){
    var createHash;
    createHash = arg$.createHash;
    return function(it){
      var x$;
      x$ = createHash('sha1');
      x$.update(it);
      return x$.digest('hex');
      return x$;
    };
  }.call(this, require('crypto')));
  strCast = (function(it){
    return it + '';
  });
  module.exports = Trakt = (function(){
    Trakt.displayName = 'Trakt';
    var _username, _password, _apiKey, BASE_URL, _apiCall, i$, len$, prototype = Trakt.prototype, constructor = Trakt;
    constructor.sha1 = clone$(sha1);
    BASE_URL = 'http://api.trakt.tv';
    function Trakt(apiKey){
      apiKey == null && (apiKey = (function(){
        throw new Error('No apikey');
      }()));
      _apiKey = apiKey;
    }
    Object.defineProperty(prototype, 'username', {
      get: function(){
        return _username;
      },
      set: function(str){
        _username = strCast(str);
      },
      configurable: true,
      enumerable: true
    });
    Object.defineProperty(prototype, 'password', {
      get: function(){
        return !!_password;
      },
      set: function(str){
        _password = sha1(strCast(str));
      },
      configurable: true,
      enumerable: true
    });
    Object.defineProperty(prototype, 'passwordHash', {
      set: function(str){
        _password = strCast(str);
      },
      configurable: true,
      enumerable: true
    });
    prototype.apiCall = _apiCall = curry$(function(arg$, data){
      var ref$, type, route, urlparams, qsparams, jsonparams, opt, that, i$, len$, ref1$;
      ref$ = arg$ != null
        ? arg$
        : (function(){
          throw new Error('No method');
        }()), type = ref$[0], route = ref$[1], urlparams = ref$[2], qsparams = ref$[3], jsonparams = ref$[4];
      data = clone$(data);
      data = (function(){
        switch (toString$.call(data).slice(8, -1)) {
        case 'Array':
          return {
            urlparams: data[0],
            qsparams: data[1],
            jsonparams: data[2]
          };
        case 'Object':
          return data;
        default:
          return {};
        }
      }());
      opt = {
        method: type,
        url: BASE_URL + '/' + route + '/' + _apiKey
      };
      if ('urlparams' in data) {
        opt.url = resolve(opt.url + '/', (ref$ = data.urlparams, delete data.urlparams, ref$));
      } else if (that = urlparams != null ? urlparams.split('/') : void 8) {
        for (i$ = 0, len$ = that.length; i$ < len$; ++i$) {
          (fn$.call(this, that[i$]));
        }
      }
      if ('qsparams' in data) {
        opt.qs = (ref$ = data.qsparams, delete data.qsparams, ref$);
      } else if (that = qsparams != null ? qsparams.split('/') : void 8) {
        for (i$ = 0, len$ = that.length; i$ < len$; ++i$) {
          (fn1$.call(this, that[i$]));
        }
      }
      if ('jsonparams' in data) {
        opt.json = (ref$ = data.jsonparams, delete data.jsonparams, ref$);
      } else if (that = jsonparams != null ? jsonparams.split('/') : void 8) {
        for (i$ = 0, len$ = that.length; i$ < len$; ++i$) {
          (fn2$.call(this, that[i$]));
        }
      }
      if (_username != null && _password != null) {
        ref1$ = [_username, _password], (ref$ = opt.json || (opt.json = {}))['username'] = ref1$[0], ref$['password'] = ref1$[1];
      }
      return request(opt).then(function(it){
        var x$;
        if (toString$.call(it).slice(8, -1) === 'Array') {
          it = it[0];
        }
        if (it.statusCode === 200) {
          return it.body;
        } else {
          throw x$ = new Error('Unexpected status code: ' + it.statusCode), x$.res = it, x$;
        }
      });
      function fn$(ref$){
        var that, ref1$;
        opt.url += '/';
        if (that = (ref1$ = data[ref$], delete data[ref$], ref1$)) {
          opt.url += that;
        }
      }
      function fn1$(ref$){
        var that, ref1$;
        if (that = (ref1$ = data[ref$], delete data[ref$], ref1$)) {
          (opt.qs || (opt.qs = {}))[ref$] = that;
        }
      }
      function fn2$(ref$){
        var that, ref1$;
        if (that = (ref1$ = data[ref$], delete data[ref$], ref1$)) {
          (opt.json || (opt.json = {}))[ref$] = that;
        }
      }
    });
    for (i$ = 0, len$ = methods.length; i$ < len$; ++i$) {
      (fn$.call(Trakt, methods[i$]));
    }
    return Trakt;
    function fn$(method){
      var x$, keyPath, name, accessed, i$, y$, len$;
      x$ = keyPath = split$.call(method[1], '/');
      name = (split$.call(x$.pop(), '.'))[0];
      accessed = prototype;
      for (i$ = 0, len$ = keyPath.length; i$ < len$; ++i$) {
        y$ = keyPath[i$];
        accessed = accessed[y$] || (accessed[y$] = {});
      }
      accessed[name] = _apiCall(method);
    }
  }());
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
